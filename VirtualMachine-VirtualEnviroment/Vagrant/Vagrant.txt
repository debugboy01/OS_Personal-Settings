**********VAGRANT

sudo apt-get install vagrant

Se instalaran los siguientes paquetes:
  bsdtar libarchive13 libruby1.9.1 libyaml-0-2 ruby ruby-childprocess
  ruby-erubis ruby-ffi ruby-i18n ruby-log4r ruby-net-scp ruby-net-ssh
  ruby1.9.1
/*
  Vagrant es una herramienta en el entorno Ubuntu Linux para la creación de un entorno de desarrollo virtual completo,
  Tambien comumente conocido como VDE.
  Vagrant reduce drasticamente la cantidad de tiempo en el que se necesita para reconstruir tu sistema operativo ( inicio ),
  y actua como un centro de configuracion central para las actividades,
  lo que permite administrar facilmente y desplegar VDEs utilizando la misma configuracion basica.
  Es importante senalar que tambien es necesario virtual Box, ya que vagrant usa su funcionalidad
  
   Si por ejemplo queremos una máquina virtual con LAMP o Node.js, podemos descargarla y configurarla en un momento para tener todo listo y ponerse a programar.

  El hecho de no tener que configurar nada en nuestro ordenador hace que si rompemos algo, sea en la máquina virtual, además de que no tendremos nada instalado que no queramos.

  Un uso esencial de Vagrant, es la creacion de sistemas Servers, como aplicaciones web servers.
  La principal ventaja que encuentro es que si queremos desarrollar una aplicación Web,
  no tenemos que configurar nada en nuestro ordenador y llenarlo de programas como Apache, Nginx, PHP, MySQL, etcétera.
  Vagrant tiene “cajas” con sistemas operativos para desarrollar directamente en ellos.
  Si por ejemplo queremos una máquina virtual con LAMP o Node.js,
  podemos descargarla y configurarla en un momento para tener todo listo y ponerse a programar.
*/

/*
   LA PAGINA DE LAS ISO:
    https://atlas.hashicorp.com/boxes/search
 
   COMANDOS UTILES:
    Anadimos una "Caja" a vagrant:
      vagrant box add hashicorp/precise32 http://files.vagrantup.com/precise32.box
      ( tambien podria ser ubuntu/trusty64, si quieres esa version ubuntu)

   Ver el archivo VagrantComand.txt
*/

/*
  CREANDO UNA MAQUINA "Caja:"
  mkdir vagrantBox
  cd vagrantBox
  
  Para montar una maquina, es necesario un archivo llamado Vagrantfile 
  el cual contiene la configuración necesaria para utilizarla.
  Si la creamos con el comando vagrant init por defecto viene con un contenido bastante extenso a modo orientativo,
  pero casi todo está comentado.
  Por ahora, el archivo va a tener el siguiente contenido:
  
    # -*- mode: ruby -*-
    # vi: set ft=ruby :
     
    VAGRANTFILE_API_VERSION = "2"
     
    Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
     
      # Insert config options here
     
    end

  Anadimos configuracion de Vagrant en el comentario # insert
  
  Escogemos el Sistema operativo:
    desde la pagina de descargas de vagrant:
    https://atlas.hashicorp.com/boxes/search
    Anadimos la linea:
      config.vm.box = "ubuntu/trusty64"

  Redireccionamiento de puertos:
     Al estar desarrollando cualquier aplicación, no sólo una Web,
     queremos ir probándola durante el proceso.
     Pero, ¿cómo accedemos a la máquina virtual Vagrant que acabamos de crear a través del navegador? Muy fácil.
     Apache estará escuchando en el puerto 80,
     pero si intentamos acceder a http://localhost:80, no funcionará.
     Para que funcione bien tenemos que hacer un redireccionamiento de puertos, es decir,
     que simularemos que el puerto 8080 (es el que suelo utilizar cuando desarrollo) es el 80 de la máquina virtual.
     Añadimos la siguiente línea:
      config.vm.network "forwarded_port", guest: 80, host: 8080
      
    Red privada:
      Si en lugar de acceder por localhost,
      queremos hacerlo por IP, añadimos lo siguiente:
        config.vm.network "private_network", ip: "192.168.33.10"
        
    Carpetas compartidas:
      Ya que nuestro objetivo es desarrollar una aplicación Web,
      tenemos que programar.
      El código que desarrollemos estará en nuestro ordenador,
      no en la máquina virtual.
      La carpeta donde tendremos el proyecto Web se va a llamar htdocs
      y va a sincronizarse con /var/www/html dentro de la máquina virtual.
      Para compartirlo con ella, haremos lo siguiente:
        config.vm.synced_folder "htdocs", "/var/www/html"
    
    Install y Config el entorno de desarrollo:
      Para instalar LAMP, vamos a añadir las instrucciones a un archivo llamado config.sh,
      que editaremos en el siguiente paso.
      En él estarán los comandos de instalación y se ejecutará automáticamente al crear la máquina.
      Añadimos la siguiente línea:
        config.vm.provision "shell", path: "config.sh"
        
   Luego en la consola:
    vagrant up
    
   Luego nos conectamos a la maquina virtual:
    vagrant ssh
    Tenga cuidado con hacer rm -rf/, ya que vagrant comparte un directorio en / con el host que contiene su Vagrantfile.
    Nos contecamos a precise32.
      ls /vagrant
      nos mostrara el Vagrantfile ( que es el mismo que esta en el host)
    hagamos esto:
      touch /vagrant/foo
    salgamos dela sesion:
      exit
   Ahora en el host, veamos nuestra carpeta vagrantBox
    y tendra Vagrantfile y foo
   Nuestras carpetas estan sincronizadas !!
   
   creamos un archivo llamado bootstrap.sh que contenga:
    #!/usr/bin/env bash
    apt-get update
    apt-get install -y apache2
    if ! [ -L /var/www ]; then
      rm -rf /var/www
      ln -fs /vagrant /var/www
    fi
    
    para este ejemplo pequeno anadimos:
      config.vm.provision :shell, path: "bootstrap.sh"

*/
